if exist('/home/sh/workspace/caffe/matlab/+caffe','dir')
    addpath('/home/sh/workspace/caffe/matlab');
else
    error('cannot find caffe');
end

caffe.set_mode_cpu();

model = '/home/sh/data/VGG16/VGG_ILSVRC_16_layers_deploy.prototxt';
weights = '/home/sh/data/VGG16/VGG_ILSVRC_16_layers.caffemodel';

net = caffe.Net(model, weights, 'test');

netparams = {...
    {net.params('conv1_1',1).get_data(),net.params('conv1_1',2).get_data()}, ... 
    {net.params('conv1_2',1).get_data(),net.params('conv1_2',2).get_data()}, ...
    {net.params('conv2_1',1).get_data(),net.params('conv2_1',2).get_data()}, ... 
	{net.params('conv2_2',1).get_data(),net.params('conv2_2',2).get_data()}, ...
	{net.params('conv3_1',1).get_data(),net.params('conv3_1',2).get_data()}, ...
	{net.params('conv3_2',1).get_data(),net.params('conv3_2',2).get_data()}, ...
	{net.params('conv3_3',1).get_data(),net.params('conv3_3',2).get_data()}, ...
    {net.params('conv4_1',1).get_data(),net.params('conv4_1',2).get_data()}, ...
    {net.params('conv4_2',1).get_data(),net.params('conv4_2',2).get_data()}, ...
    {net.params('conv4_3',1).get_data(),net.params('conv4_3',2).get_data()}, ...
    {net.params('conv5_1',1).get_data(),net.params('conv5_1',2).get_data()}, ...
    {net.params('conv5_2',1).get_data(),net.params('conv5_2',2).get_data()}, ...
    {net.params('conv5_3',1).get_data(),net.params('conv5_3',2).get_data()}, ...
    {net.params('fc6',1).get_data(),net.params('fc6',2).get_data()}, ...
    {net.params('fc7',1).get_data(),net.params('fc7',2).get_data()}, ...
    {net.params('fc8',1).get_data(),net.params('fc8',2).get_data()}...
};
        
WeightWidth    = [ 8;  8;  8;  8;  8;  8;  8;  8;  8;  8;  8;  8;  8;  4;  4;  4];
WeightFrac     = [ 7;  8;  8;  8;  7;  8;  8;  8;  8;  8;  9;  9;  8;  8;  7;  7];

MathType   = fimath('RoundingMethod', 'Nearest', 'OverflowAction', 'Saturate', 'ProductMode', 'FullPrecision', 'SumMode', 'FullPrecision');
whos
for i=1:16
    WeightType{i}  = numerictype('Signed',1, 'WordLength', WeightWidth(i), 'FractionLength', WeightFrac(i));
    weight{i}  = fi(netparams{i}{1}, WeightType{i}, MathType);
    bias{i}    = fi(netparams{i}{2}, WeightType{i}, MathType);
end

fid = fopen('weights.dat', 'w');
for i=1:16
    fwrite(fid, storedInteger(weight{i}), 'int8');
    fwrite(fid, storedInteger(bias{i}), 'int8');
end
fclose(fid);